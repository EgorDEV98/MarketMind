// <auto-generated />
using System;
using MarketMind.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MarketMind.Data.Migrations
{
    [DbContext(typeof(PostgresDbContext))]
    partial class PostgresDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MarketMind.Data.Entities.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("LogoBaseColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LogoName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ShareId")
                        .HasColumnType("uuid");

                    b.Property<string>("TextColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ShareId")
                        .IsUnique();

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("MarketMind.Data.Entities.Candle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CandleSourceType")
                        .IsRequired()
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("Close")
                        .HasColumnType("numeric");

                    b.Property<decimal>("High")
                        .HasColumnType("numeric");

                    b.Property<string>("Interval")
                        .IsRequired()
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Low")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Open")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ShareId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Volume")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ShareId");

                    b.ToTable("Candles");
                });

            modelBuilder.Entity("MarketMind.Data.Entities.Share", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CountryOfRisk")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CountryOfRiskName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Figi")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("First1DayCandleDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("First1MinCandleDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("ForQualInvestorFlag")
                        .HasColumnType("boolean");

                    b.Property<int>("Lot")
                        .HasColumnType("integer");

                    b.Property<decimal>("MinPriceIncrement")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ShortEnabledFlag")
                        .HasColumnType("boolean");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("WeekendFlag")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("Figi", "Ticker")
                        .IsUnique();

                    b.ToTable("Shares");
                });

            modelBuilder.Entity("MarketMind.Data.Entities.Brand", b =>
                {
                    b.HasOne("MarketMind.Data.Entities.Share", "Share")
                        .WithOne("Brand")
                        .HasForeignKey("MarketMind.Data.Entities.Brand", "ShareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Share");
                });

            modelBuilder.Entity("MarketMind.Data.Entities.Candle", b =>
                {
                    b.HasOne("MarketMind.Data.Entities.Share", "Share")
                        .WithMany("Candles")
                        .HasForeignKey("ShareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Share");
                });

            modelBuilder.Entity("MarketMind.Data.Entities.Share", b =>
                {
                    b.Navigation("Brand")
                        .IsRequired();

                    b.Navigation("Candles");
                });
#pragma warning restore 612, 618
        }
    }
}
